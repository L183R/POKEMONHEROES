 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/hangman.py b/hangman.py
index bf4a3027c51bc70424d8ba03f631412aab98e2be..ba0a70126259b1c81060c419b3fb1f69b84ae533 100644
--- a/hangman.py
+++ b/hangman.py
@@ -29,52 +29,54 @@ AUTO_GUESS_WHEN_CANDIDATES = True
 AUTO_GUESS_MAX_PER_ROUND = 26
 AUTO_GUESS_SLEEP_SEC = 0.6
 
 # Fallback cuando NO hay candidatas: orden de frecuencia en inglés
 FALLBACK_GUESS_WHEN_NO_CANDIDATES = True
 FALLBACK_FREQ_ORDER = "ETAOINSHRDLUCMFYWGPBVKXQJZ"
 FALLBACK_MAX_PER_ROUND = 26
 FALLBACK_SLEEP_SEC = 0.5
 
 # Timeout de input (auto-ENTER)
 INPUT_TIMEOUT_SEC = 5
 # ==========================
 
 if os.name == "nt":
     import msvcrt  # Windows
 
 def cookies_from_string(s: str) -> dict:
     d = {}
     for part in [p.strip() for p in s.split(";") if p.strip()]:
         if "=" in part and not part.lower().startswith("expires"):
             k, v = part.split("=", 1)
             d[k.strip()] = v.strip()
     return d
 
 def normalize_text(txt: str) -> str:
-    txt = unescape(txt).replace("\xa0", " ")
-    return re.sub(r"[ \t\r\f\v]+", " ", txt)
+    txt = unescape(txt)
+    txt = re.sub(r"\xa0{2,}", " ", txt)
+    txt = txt.replace("\xa0", "")
+    return re.sub(r"[ \t\r\f\v]+", " ", txt).strip()
 
 def load_wordlist(path: Path) -> list[str]:
     if not path.exists():
         return []
     return [line.strip() for line in path.read_text(encoding="utf-8").splitlines() if line.strip()]
 
 def spaced(s: str) -> str:
     return " ".join(list(s))
 
 def matches_pattern(candidate: str, raw_game_word: str, wrong_letters: set[str] | None = None) -> bool:
     """
     - misma longitud/espacios que el patrón
     - respeta letras reveladas
     - '_' acepta letra (no espacio)
     - NO repite una letra revelada en posiciones ocultas
     - excluye letras fallidas
     """
     cand = candidate.upper()
     patt = raw_game_word.upper()
     if len(cand) != len(patt):
         return False
 
     revealed_positions: dict[str, set[int]] = {}
     for i, (pc, cc) in enumerate(zip(patt, cand)):
         if pc == " ":
 
EOF
)